---
title: "Bachelor Kolloquium"
subtitle: "Konzeption und Entwicklung eines Systems zur Verwaltung und Erstellung von ModulhandbÃ¼chern"
date: now
date-format: "D. MMMM YYYY"
format:
  revealjs:
    header: Bachelor Kolloquium
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: images/hsh.svg
    css: styles.css
    footer: Tobias Wylega
    theme: serif
    template-partials:
        - title-slide.html
    include-in-header:
      - text: |
          <script src = "https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""></script>
          <script type="text/javascript">
            $(document).ready(function() {
              $('body').prepend('<div class=\"zoomDiv\"><img src=\"\" class=\"zoomImg\"></div>');
              // onClick function for all plots (img's)
              $('img:not(.zoomImg)').click(function() {
                $('.zoomImg').attr('src', $(this).attr('src')).css({width: '100%'});
                $('.zoomDiv').css({opacity: '1', width: 'auto', border: '1px solid white', borderRadius: '5px', position: 'fixed', top: '50%', left: '50%', marginRight: '-50%', transform: 'translate(-50%, -50%)', boxShadow: '0px 0px 50px #888888', zIndex: '50', overflow: 'auto', maxHeight: '100%'});
              });
              // onClick function for zoomImg
              $('img.zoomImg').click(function() {
                $('.zoomDiv').css({opacity: '0', width: '0%'});
              });
            });
          </script>
revealjs-plugins:
  - attribution
resources:
  - demo.pdf
filters:
  - reveal-header

---

# ModulhandbÃ¼cher
- Was sind ModulhandbÃ¼cher?
- Warum sind sie wichtig?
- Wie werden sie erstellt?

## Was sind ModulhandbÃ¼cher?
::: header
ModulhandbÃ¼cher
:::
::: {.columns}

::: {.column width="50%"}
StudiengÃ¤nge sind in Module unterteilt.

Jedes Modul hat eine Beschreibung.
:::

::: {.column width="50%"}
![](images/handbuch.png)
:::
:::

::: notes
1. StudiengÃ¤nge sind in Module unterteilt. Der Studiengang MDI hat z.B. die Module "Webtechnologien" und "Bachelorarbeit mit Kolloquium".
2. Jedes Modul hat eine Beschreibung, wie rechts im Bild zu sehen
3. Alle Beschreibungen eines Studiengangs sind in einem PDF zusammengefasst
4. Um dieses PDF geht es heute
:::

## Bisheriger Prozess
::: header
ModulhandbÃ¼cher
:::
- ModulhandbÃ¼cher werden in Word erstellt

::: {.fragment}
### 1. Verbesserung
- ModulhandbÃ¼cher wurden in Datenbank Ã¼berfÃ¼hrt
- Aus Datenbank wurden PDFs generiert
:::

::: notes
1. Letztes Jahr wurden die ModulhandbÃ¼cher noch in Word-Dokumenten verwaltet.
2. Das das nicht gut ist, liegt auf der Hand: Keine Validierung, redundante Daten
3. Deshalb wurden die ModulhandbÃ¼cher von Professor Heine in eine Datenbank Ã¼berfÃ¼hrt
4. Er hat auÃŸerdem ein Skript erstellt, um aus der Datenbank PDFs zu generieren
:::

## Probleme
::: header
ModulhandbÃ¼cher
:::
Direkter Zugriff auf Datenbank bringt Probleme mit sich:

::: {.incremental}
- Software notwendig
- Keine Versionierung
- Wenig Validierung
- Datenbank selbst enthÃ¤lt noch Redundanzen
- -> Neues System notwendig
:::

::: notes
- Nur Datenbank, keine BenutzeroberflÃ¤che, daher folgende Probleme
:::

## 
âœ… ModulhandbÃ¼cher

âœ… Bisheriger Prozess & dessen Probleme

ðŸ”œ Neues System

# Zielgruppe
Wer wird das neue System nutzen?

Welche Anforderungen gibt es?

## Interessierte & Studierende
::: header
Zielgruppe
:::


Welche Inhalte bietet das Studium?

::: {.fragment}
Welche Wahlpflichtmodule gibt es?
:::

::: {.fragment}
Welche Voraussetzungen gibt es fÃ¼r Modul X?
:::

##
::: header
Zielgruppe
:::
### Dozierende
Aktualisieren von Modulbeschreibungen

::: {.fragment}
### Studiendekan
VerÃ¶ffentlichung von ModulhandbÃ¼chern
:::


## Technische Anforderungen
::: header
Anforderungen
:::

::: {.incremental}
- Angular Frontend
- NestJS Backend
- Prisma ORM
:::

# Entwurf
- Wie muss die Datenbank strukturiert sein?
- Wie wird das Frontend aussehen?

## ER-Diagramm {auto-animate="true"}
::: header
Entwurf
:::
![](images/fullER.svg)

## ER-Diagramm Auszug {auto-animate="true"}
::: header
Entwurf
:::
![](images/simple_ER.svg)

## Frontend - Startseite
::: header
Entwurf
:::
![](images/Navigation.svg)

## Frontend - Modulansicht
::: header
Entwurf
:::
![](images/ModernPreview.svg)


## Frontend - Modulbearbeitung
::: header
Entwurf
:::
![](images/AddModule.svg)

## Recap
âœ… Use Cases / Anforderungen

âœ… Entwurf der Datenbank

âœ… Entwurf des Frontends

ðŸ”œ Implementierung

# Implementierung
- Designentscheidungen
- Herausforderungen

## Backend - Datenbank {auto-animate="true"}
::: header
Implementierung
:::

```prisma
model Module {
``` 

## Backend - Datenbank {auto-animate="true"}
::: header
Implementierung
:::

```{code-line-numbers}
model Module {
 id Int @id @default(autoincrement())
 name                String?
``` 

## Backend - Datenbank {auto-animate="true"}
::: header
Implementierung
:::

```prisma {code-line-numbers="4-5,8-10"}
model Module {
 id Int @id @default(autoincrement())
 name                String?
 degreeProgram       DegreeProgram @relation(fields: [degreeProgramId], references: [id])
 degreeProgramId     Int
...

model DegreeProgram {
  id                 Int           @id @default(autoincrement())
  modules            Module[]
...
``` 

## Backend - API {auto-animate="true"}
```ts {code-line-numbers="3|4-6|1-2"}
@ApiTags('Degrees')
@Controller('degrees')
export class DegreeController {
  constructor(
    private degreeService: DegreeService
  ) {}
```
## Backend - API {auto-animate="true"}
```ts {code-line-numbers="8-10"}
@ApiTags('Degrees')
@Controller('degrees')
export class DegreeController {
  constructor(
    private degreeService: DegreeService
  ) {}

  @Get(':id')
  findOne(@Param('id') id: string, @Req() request: Request): Promise<any> {
  }
}
```
## Backend - API {auto-animate="true"}
```ts {code-line-numbers="10-11"}
@ApiTags('Degrees')
@Controller('degrees')
export class DegreeController {
  constructor(
    private degreeService: DegreeService
  ) {}

  @Get(':id')
  findOne(@Param('id') id: string, @Req() request: Request): Promise<any> {
    const language = (request.headers as any)['language'];
    return this.degreeService.findById(+id, language);
  }
}
```

## UI-Framework
::: header
Implementierung
:::
### Bootstrap vs. PrimeNG
<br>

|   | Bootstrap  | PrimeNG  |
|--------|--------|--------|
| Weekly Downloads  | 424,283   | 355,443   |
| ...  | ...   | ...   |
| Anzahl Komponenten | ~25   | ~100   |



## Ãœbersetzbarkeit
::: header
Implementierung
:::

- Angular i18n
    - Einrichtung ist aufwÃ¤ndig
    - Keine zentrale Ãœbersetzungsdatei

::: {.fragment}
- Transloco
    - Einfache Einrichtung
    - Zentrale Ãœbersetzungsdatei
:::

## Ãœbersetzbarkeit - Beispiel {auto-animate="true"}
HTML-Template:

::: {data-id="box2"}
```html
<ng-container *transloco="let t">
</ng-container>
```
:::

## Ãœbersetzbarkeit - Beispiel {auto-animate="true"}
HTML-Template:

::: {data-id="box2"}
```html{ code-line-numbers="2"}
<ng-container *transloco="let t">
  <p>{{ t('title') }}</p>
</ng-container>
```
:::

::: {.fragment}
TypeScript-Datei:
```ts
console.log(translate('title'));
```
:::

::: {.fragment}
Ãœbersetzungsdatei:
```json
{
  "title": "Titel"
}
```
:::


## Dynamische Ãœbersetzungen {auto-animate="true"}
::: header
Implementierung
:::

```ts {code-line-numbers="1"}
export class LanguageInterceptor implements HttpInterceptor {
  private language: string;

  constructor(private languageService: LanguageService) {
    this.language = this.languageService.languageCode;
    this.languageService.languageSubject.subscribe((language) => {
      this.language = language;
    });
  }
}
```

## Dynamische Ãœbersetzungen {auto-animate="true"}
::: header
Implementierung
:::

```ts {code-line-numbers="11|17-21"}
export class LanguageInterceptor implements HttpInterceptor {
  private language: string;

  constructor(private languageService: LanguageService) {
    this.language = this.languageService.languageCode;
    this.languageService.languageSubject.subscribe((language) => {
      this.language = language;
    });
  }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    if (req.headers.has('language')) {
      return next.handle(req);
    }

    if (this.language) {
      const newRequest = req.clone({
        setHeaders: {
          'language': this.language.toUpperCase()
        }
      });
      return next.handle(newRequest);
    }
    return next.handle(req);
  }
}
```

## Modulbearbeitung
âœ… Ãœbersetzbarkeit

âœ… Datenbank/API mit benÃ¶tigten Tabellen

ðŸ”œ Wie werden die Daten erstellt / bearbeitet?

## Modulbearbeitung - Komponenten
::: header
Implementierung
:::

![](images/translator.svg)

## Modulbearbeitung - Komponenten
::: header
Implementierung
:::

<iframe style="background-color: white;" src="https://studymodules.tobi.win/submodules/1" width="100%" height="75%" style="border: none;"></iframe>
::: footer
[Link zur Demo](https://studymodules.tobi.win/submodules/1)
:::

::: notes
Mathe 1 in Mathe 12 umbenennen (Eng und Deutsch)
:::

## PDF-Generierung
::: header
Implementierung
:::

<iframe style="background-color: white;" src="https://studymodules.tobi.win/faculty/4/department/2" width="100%" height="75%" style="border: none;"></iframe>

::: footer
[Link zur Demo](https://studymodules.tobi.win/faculty/4/department/2)
:::

## Architektur Ãœbersicht
::: header
Implementierung
:::
![](images/Docker.png)

## Podman Image
::: header
Implementierung
:::

```Dockerfile {code-line-numbers="1|6-12|15-18"}
FROM node:alpine as build

WORKDIR /project
RUN npm install -g @angular/cli

# only copy the package.json and package-lock.json to install dependencies (Efficient Layer Caching)
COPY package*.json ./
RUN npm ci

# copy the rest of the files
COPY . .
RUN npm run build


FROM nginx:alpine
COPY --from=build /project/dist/study-modules/browser /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

## Podman Compose
```yml {code-line-numbers="6-11"}
name: studymodules_project

services:
  frontend:
    image: localhost/studymodules-frontend
  backend:
    image: localhost/studybase-backend
    ports:
      - "3000:3000"
    volumes:
      - C:\Users\tobi\studybase\docker-volume:/app/docker-volume

  documentation:
    image: localhost/studymodules-documentation
    ports:
      - "8080:80"
      - "443:443"
  latex-api:
    image: localhost/latex-api:latest
    ports:
      - "2345:8080"
    build: .
    command: make start
    environment:
      # SENTRY_DSN:
      CACHE_HOST: cache
    depends_on:
      - backend

  latex-poll-script:
    image: localhost/studymodules-latex:latest

volumes:
  caddy_data:
  caddy_config:
```

## Podman
::: header
Implementierung
:::
![](images/podman.png)

## Dokumentation
::: header
Implementierung
:::
### Markdown
- Anzeige direkt auf GitLab
- Bearbeitung mit jedem Texteditor mÃ¶glich
- Einfache Strukturierung

## Dokumentation
::: header
Implementierung
:::
![](images/documentation.png)

## Dokumentation - Suche
::: header
Implementierung
:::
![](images/docSearch.png)


## Recap
âœ… Frontend

âœ… Backend

âœ… Dokumentation

âœ… Podman-Container

ðŸ”œ Was fehlt noch?

# Fazit


## 
::: header
Fazit
:::

```{mermaid}
pie title Anforderungen
    "ErfÃ¼llt" : 43
    "Vermutlich erfÃ¼llt" : 3
    "Vorbereitet" : 8
    "Nicht erfÃ¼llt" : 10
```

## Anforderungen
::: header
Fazit
:::

### Studierende
âœ… Angebotene Module kÃ¶nnen eingesehen werden

::: {.fragment}
âœ… ModulhandbÃ¼cher kÃ¶nnen heruntergeladen werden
:::

::: {.fragment}
### Dozierende
âœ… ModulhandbÃ¼cher kÃ¶nnen erstellt und bearbeitet werden
:::

# Ausblick

## Offene ToDos
::: header
Ausblick
:::

::: {.incremental}
- Umsetzung der verbleibenden Anforderungen
- Verbesserung der CodequalitÃ¤t / der Dokumentation
- Tests
:::

## VerÃ¶ffentlichung
::: header
Ausblick
:::

::: {.incremental}
- VerÃ¶ffentlichung der Software auf Hochschulserver
- Dozierende Ã¼berprÃ¼fen die generierte PDF-Datei
- Link zum System wird auf der Website der HSH eingebunden
:::

## In Zukunft
::: header
Ausblick
:::

::: {.incremental}
- Anbindung an den Stunden-/ PrÃ¼fungs-/ Raumplan
- Anbindung weiterer StudiengÃ¤nge
- System als Vorlage fÃ¼r andere Projekte
:::

# Vielen Dank!
::: notes 
- Freunde und Familie
- Betreuer
- Dozierende die fÃ¼r Interviews zur VerfÃ¼gung standen
:::

## Ãœbersetzungsentscheidung Idee 1 {visibility="uncounted"}
![](images/reserve/idea1.svg)

## Ãœbersetzungsentscheidung Idee 2 {visibility="uncounted"}
![](images/reserve/idea2.svg)

## Ãœbersetzungsentscheidung Idee 3 {visibility="uncounted"}
![](images/reserve/idea3.svg)


## Umsortieren der Translations {visibility="uncounted"}


module-preview.component.ts 
```html
  <b>{{t('subTitle')}}</b>
  <span>{{ module?.translations?.at(activeTranslationIndex)?.subtitle }}</span>
```

:::notes
Was ist der einfachste Weg ein Modul abzuspeichern?

Wir haben ein Modulobjekt, das alle relevaten Informationen enthÃ¤lt.

Wenn wir das aufteilen wÃ¼rden in Modul und ModulTexte, hÃ¤tten wir 2 Objekte, die wir ans Backend senden mÃ¼ssten.
Siehe nÃ¤chste Folie.
:::


## Update-Endpoint {visibility="uncounted"}

``` ts {code-line-numbers="1-2|3-5|15|18-30|19-22|24-28|32-44"}
async update(moduleDto: ModuleDto) {
  const {
    id,
    responsibleId,
    responsible,
    requirementsHardId,
    requirementsSoftId,
    requirementsHard: requirementsHardNew,
    requirementsSoft: requirementsSoftNew,
    degreeProgramId,
    groupId,
    group,
    translations,
    subModules,
    ...moduleData
  } = moduleDto;

  await this.prisma.$transaction(async (prisma) => {
    await prisma.module.update({
      where: { id },
      data: moduleData
    });

    await this.updateRequirements(prisma, moduleDto);
    await this.upsertModuleTranslations(prisma, moduleDto);
    await this.connectResponsible(prisma, moduleDto);
    await this.connectSubModules(prisma, moduleDto);
    await this.connectGroup(prisma, moduleDto);
  });
}

async connectResponsible(prisma: any, moduleDto: ModuleDto) {
  const { responsibleId, id } = moduleDto;

  if (!responsibleId) return;

  await prisma.module.update({
    where: { id },
    data: {
      responsible: responsibleId ? {
        connect: { id: responsibleId }
      } : undefined
    }
  });
}
```
:::notes 
Das Backend erhÃ¤lt ein Objekt, in dem alle Informationen des Moduls enthalten sind.

Hier werden die verschiedenen Daten auseinandergepfÃ¼ckt und separat verarbeitet.
:::


## Vergleichsmethoden fÃ¼r Changelog {visibility="uncounted"}
```ts
const compareTranslations = (unchangedObject: any, newObject: any, baseFieldName: string) => {
  unchangedObject.translations.forEach((oldTranslationObject: any, index: any) => {
    const newTranslationObject = newObject.translations.find((newTranslation: any) => newTranslation.languageId === oldTranslationObject.languageId);
    const languageAbbreviation = languages.find(l => l.id === oldTranslationObject.languageId)?.abbreviation;

    if (newTranslationObject && languageAbbreviation) {
      compareTranslationFields(oldTranslationObject, newTranslationObject, baseFieldName, languageAbbreviation);
    }
  });
};
...

const compareArrayField = (unchangedObject: any, newObject: any, baseFieldName: string, field: string) => {
  const unchangedObjectIds = unchangedObject[field].map((obj: any) => obj.id);
  const newObjectIds = newObject[field].map((obj: any) => obj.id);

  // Check if the arrays contain the same elements, ignore the order
  if (JSON.stringify(unchangedObjectIds.sort()) !== JSON.stringify(newObjectIds.sort())) {
    changes.push({
      field: `${baseFieldName}.${String(field)}`,
      oldValue: unchangedObjectIds,
      newValue: newObjectIds
    });
  }
};



const comparePrimitiveField = (unchangedObject: any, newObject: any, baseFieldName: string, field: string) => {
  if (unchangedObject[field] !== newObject[field]) {
    changes.push({
      field: `${baseFieldName}.${String(field)}`,
      oldValue: unchangedObject[field],
      newValue: newObject[field]
    });
  }
};
```

::: notes

Gekapselte Methoden die innerhalb einer anderen Methode genutzt werden.

Stehen nicht wie andere Funktionen innerhalb der Klasse, weil sie nur fÃ¼r die eine Methode relevant sind.

Nach dem Prinzip der Kapselung sollen nur die Methoden sichtbar sein, die benÃ¶tigt werden. 

Die hier gezeigten Methoden sind nur fÃ¼r die eine Methode relevant und mÃ¼ssen deshalb nur fÃ¼r die sichtbar sein.

:::


## Messung der CodequalitÃ¤t {visibility="uncounted"}
::: {.incremental}
- Richtwert: Cycolmatic Complexity <= 10
:::

::: notes

Cycolmatic Complexity von 10 wurde gesetzt.
Vorschlag von SonarQube

Maximal 10 If-Statements in einer Methode

Das heiÃŸt nicht, dass Code dadurch nie komplex ist und auch Code mit KomplexitÃ¤t von 20
kann noch simpel sein. 

Jedoch ist eine hohe KomplexitÃ¤t ein Indikator fÃ¼r komplizierten Code und man sollte das dann zumindest einmal prÃ¼fen.

:::


## UserService ist in Frontend und Backend {visibility="uncounted"}

::: {.incremental}
- Seperation of Concerns
- Entkopplung
:::

::: notes

Unterschiedliche Verantwortlichkeiten (Separation of Concerns)

Backend: GeschÃ¤ftslogik, Autorisierung 

Frontend: Benutzerinteraktionen zu verarbeiten


Entkopplung -> FlexibilitÃ¤t
Es kÃ¶nnen unterschiedliche Technologien verwendet werden


Anpassungen fÃ¼r UI
Es kann notwendig sein, Daten im Frontend umzuwandeln, um sie besser anzeigen zu kÃ¶nnen


Praktisch wÃ¼rde man eher die Dtos generieren lassen, statt den gleichen Code (z.B. mithilfe von npm Packages) zu verwenden


:::