---
title: "Bachelor Kolloquium"
subtitle: "Konzeption und Entwicklung eines Systems zur Verwaltung und Erstellung von Modulhandb√ºchern"
date: now
date-format: "D. MMMM YYYY"
format:
  revealjs:
    header: Bachelor Kolloquium
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: images/hsh.svg
    css: styles.css
    footer: Tobias Wylega
    theme: serif
    template-partials:
        - title-slide.html
    include-in-header:
      - text: |
          <script src = "https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""></script>
          <script type="text/javascript">
            $(document).ready(function() {
              $('body').prepend('<div class=\"zoomDiv\"><img src=\"\" class=\"zoomImg\"></div>');
              // onClick function for all plots (img's)
              $('img:not(.zoomImg)').click(function() {
                $('.zoomImg').attr('src', $(this).attr('src')).css({width: '100%'});
                $('.zoomDiv').css({opacity: '1', width: 'auto', border: '1px solid white', borderRadius: '5px', position: 'fixed', top: '50%', left: '50%', marginRight: '-50%', transform: 'translate(-50%, -50%)', boxShadow: '0px 0px 50px #888888', zIndex: '50', overflow: 'auto', maxHeight: '100%'});
              });
              // onClick function for zoomImg
              $('img.zoomImg').click(function() {
                $('.zoomDiv').css({opacity: '0', width: '0%'});
              });
            });
          </script>
revealjs-plugins:
  - attribution
resources:
  - demo.pdf
filters:
  - reveal-header

---

# Modulhandb√ºcher
- Was sind Modulhandb√ºcher?
- Warum sind sie wichtig?
- Wie werden sie erstellt?

## Was sind Modulhandb√ºcher?
::: header
Modulhandb√ºcher
:::
::: {.columns}

::: {.column width="50%"}
Studieng√§nge sind in Module unterteilt.

Jedes Modul hat eine Beschreibung.
:::

::: {.column width="50%"}
![](images/handbuch.png)
:::
:::

## Bisheriger Prozess
::: header
Modulhandb√ºcher
:::
- Modulhandb√ºcher werden in Word erstellt

::: {.fragment}
### 1. Verbesserung
- Modulhandb√ºcher wurden in Datenbank √ºberf√ºhrt
- Aus Datenbank wurden PDFs generiert
:::

## Probleme
::: header
Modulhandb√ºcher
:::
Direkter Zugriff auf Datenbank bringt Probleme mit sich:

::: {.incremental}
- Software notwendig
- Keine Versionierung
- Keine Validierung
- Datenbank selbst enth√§lt noch Redundanzen
- -> Neues System notwendig
:::




# Zielgruppe
Wer wird das neue System nutzen?

## Interessierte & Studierende
::: header
Zielgruppe
:::

Welche Inhalte bietet das Studium?

Welche Wahlpflichtmodule gibt es?

Welche Voraussetzungen gibt es f√ºr Modul X?


##
::: header
Zielgruppe
:::
### Dozierende
Aktualisieren von Modulbeschreibungen

::: {.fragment}
### Studiendekan
Ver√∂ffentlichung von Modulhandb√ºchern
:::

# Anforderungen
Auszug aus den Anforderungen

## Technische Anforderungen
::: header
Anforderungen
:::

::: {.incremental}
- Angular Frontend
- NestJS Backend
- Prisma ORM
:::

# Entwurf
- Wie muss die Datenbank strukturiert sein?
- Wie wird das Frontend aussehen?

## ER-Diagramm {auto-animate="true"}
::: header
Entwurf
:::
![](images/fullER.svg)

## ER-Diagramm Auszug {auto-animate="true"}
::: header
Entwurf
:::
![](images/simple_ER.svg)

## Frontend - Startseite
::: header
Entwurf
:::
![](images/Navigation.svg)

## Frontend - Modulansicht
::: header
Entwurf
:::
![](images/ModernPreview.svg)


## Frontend - Modulbearbeitung
::: header
Entwurf
:::
![](images/AddModule.svg)

## Recap
‚úÖ Use Cases / Anforderungen

‚úÖ Entwurf der Datenbank

‚úÖ Entwurf des Frontends

üîú Implementierung

# Implementierung
- Designentscheidungen
- Herausforderungen

## Backend - Datenbank {auto-animate="true"}
::: header
Implementierung
:::

```prisma
model Module {
``` 

## Backend - Datenbank {auto-animate="true"}
::: header
Implementierung
:::

```{code-line-numbers}
model Module {
 id Int @id @default(autoincrement())
 name                String?
``` 

## Backend - Datenbank {auto-animate="true"}
::: header
Implementierung
:::

```prisma {code-line-numbers="4-5,8-10"}
model Module {
 id Int @id @default(autoincrement())
 name                String?
 degreeProgram       DegreeProgram @relation(fields: [degreeProgramId], references: [id])
 degreeProgramId     Int
...

model DegreeProgram {
  id                 Int           @id @default(autoincrement())
  modules            Module[]
...
``` 

## Backend - API {auto-animate="true"}
```ts {code-line-numbers="3|4-6|1-2"}
@ApiTags('Degrees')
@Controller('degrees')
export class DegreeController {
  constructor(
    private degreeService: DegreeService
  ) {}
```
## Backend - API {auto-animate="true"}
```ts {code-line-numbers="8-10"}
@ApiTags('Degrees')
@Controller('degrees')
export class DegreeController {
  constructor(
    private degreeService: DegreeService
  ) {}

  @Get(':id')
  findOne(@Param('id') id: string, @Req() request: Request): Promise<any> {
  }
}
```
## Backend - API {auto-animate="true"}
```ts {code-line-numbers="10-11"}
@ApiTags('Degrees')
@Controller('degrees')
export class DegreeController {
  constructor(
    private degreeService: DegreeService
  ) {}

  @Get(':id')
  findOne(@Param('id') id: string, @Req() request: Request): Promise<any> {
    const language = (request.headers as any)['language'];
    return this.degreeService.findById(+id, language);
  }
}
```

## UI-Framework
::: header
Implementierung
:::
### Bootstrap vs. PrimeNG
<br>

|   | Bootstrap  | PrimeNG  |
|--------|--------|--------|
| Weekly Downloads  | 424,283   | 355,443   |
| ...  | ...   | ...   |
| Anzahl Komponenten | ~25   | ~100   |



## √úbersetzbarkeit
::: header
Implementierung
:::

- Angular i18n
    - Einrichtung ist aufw√§ndig
    - Keine zentrale √úbersetzungsdatei

::: {.fragment}
- Transloco
    - Einfache Einrichtung
    - Zentrale √úbersetzungsdatei
:::

## √úbersetzbarkeit - Beispiel {auto-animate="true"}
HTML-Template:

::: {data-id="box2"}
```html
<ng-container *transloco="let t">
</ng-container>
```
:::

## √úbersetzbarkeit - Beispiel {auto-animate="true"}
HTML-Template:

::: {data-id="box2"}
```html{ code-line-numbers="2"}
<ng-container *transloco="let t">
  <p>{{ t('title') }}</p>
</ng-container>
```
:::

::: {.fragment}
TypeScript-Datei:
```ts
console.log(translate('title'));
```
:::

::: {.fragment}
√úbersetzungsdatei:
```json
{
  "title": "Titel"
}
```
:::


## Dynamische √úbersetzungen
::: header
Implementierung
:::

```ts {code-line-numbers="1|11|17-21"}
export class LanguageInterceptor implements HttpInterceptor {
  private language: string;

  constructor(private languageService: LanguageService) {
    this.language = this.languageService.languageCode;
    this.languageService.languageSubject.subscribe((language) => {
      this.language = language;
    });
  }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    if (req.headers.has('language')) {
      return next.handle(req);
    }

    if (this.language) {
      const newRequest = req.clone({
        setHeaders: {
          'language': this.language.toUpperCase()
        }
      });
      return next.handle(newRequest);
    }
    return next.handle(req);
  }
}
```

## Modulbearbeitung
‚úÖ √úbersetzbarkeit

‚úÖ Datenbank/API mit ben√∂tigten Tabellen

üîú Wie werden die Daten erstellt / bearbeitet?

## Modulbearbeitung - Komponenten
::: header
Implementierung
:::

![](images/translator.svg)

## Modulbearbeitung - Komponenten
::: header
Implementierung
:::

<iframe style="background-color: white;" src="https://studymodules.tobi.win/submodules/1" width="100%" height="75%" style="border: none;"></iframe>
::: footer
[Link zur Demo](https://studymodules.tobi.win/submodules/1)
:::


## PDF-Generierung
::: header
Implementierung
:::

<iframe style="background-color: white;" src="https://studymodules.tobi.win/faculty/4/department/2" width="100%" height="75%" style="border: none;"></iframe>

::: footer
[Link zur Demo](https://studymodules.tobi.win/faculty/4/department/2)
:::

## Architektur √úbersicht
::: header
Implementierung
:::
![](images/Docker.png)

# Fazit


## 
::: header
Fazit
:::

```{mermaid}
pie title Anforderungen
    "Erf√ºllt" : 43
    "Vermutlich erf√ºllt" : 3
    "Vorbereitet" : 8
    "Nicht erf√ºllt" : 10
```

## Anforderungen
::: header
Fazit
:::

### Studierende
‚úÖ Angebotene Module k√∂nnen eingesehen werden

::: {.fragment}
‚úÖ Modulhandb√ºcher k√∂nnen heruntergeladen werden
:::

::: {.fragment}
### Dozierende
‚úÖ Modulhandb√ºcher k√∂nnen erstellt und bearbeitet werden
:::

# Ausblick

## Offene ToDos
::: header
Ausblick
:::

::: {.incremental}
- Umsetzung der verbleibenden Anforderungen
- Verbesserung der Codequalit√§t / der Dokumentation
- Tests
:::

## Ver√∂ffentlichung
::: header
Ausblick
:::

::: {.incremental}
- Ver√∂ffentlichung der Software auf Hochschulserver
- Dozierende √ºberpr√ºfen die generierte PDF-Datei
- Link zum System wird auf der Website der HSH eingebunden
:::

## In Zukunft
::: header
Ausblick
:::

::: {.incremental}
- Anbindung an den Stunden-/ Pr√ºfungs-/ Raumplan
- Anbindung weiterer Studieng√§nge
- System als Vorlage f√ºr andere Projekte
:::

# Vielen Dank!
- Freunde und Familie
- Betreuer
- Dozierende die f√ºr Interviews zur Verf√ºgung standen